double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    // Ensure nums1 is the smaller array
    if (nums1Size > nums2Size) {
        return findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);
    }

    int m = nums1Size, n = nums2Size;
    int left = 0, right = m;
    int i, j;
    
    while (left <= right) {
        i = (left + right) / 2;
        j = (m + n + 1) / 2 - i;

        int maxLeft1 = (i == 0) ? INT_MIN : nums1[i - 1];
        int minRight1 = (i == m) ? INT_MAX : nums1[i];
        int maxLeft2 = (j == 0) ? INT_MIN : nums2[j - 1];
        int minRight2 = (j == n) ? INT_MAX : nums2[j];

        if (maxLeft1 <= minRight2 && maxLeft2 <= minRight1) {
            if ((m + n) % 2 == 0) {
                int leftMax = (maxLeft1 > maxLeft2) ? maxLeft1 : maxLeft2;
                int rightMin = (minRight1 < minRight2) ? minRight1 : minRight2;
                return (leftMax + rightMin) / 2.0;
            } else {
                return (maxLeft1 > maxLeft2) ? maxLeft1 : maxLeft2;
            }
        } else if (maxLeft1 > minRight2) {
            right = i - 1;
        } else {
            left = i + 1;
        }
    }

    return 0.0; // should never reach here
}
